.man_3_printf "July 2024" "Cohort_2024, Holberton School" "Project: C - printf"  
.Name
.printf
.SYNOPSIS 
.#include "main.h"
.int printf(const char *format ...);
.DESCRIPTION 
.The functions in the printf() family generates an output according to
a format parameter and list of arguments. A format string consists of 
texts and characters that are printed on the standard output.
Format specifiers denoting the symbol (%) at the beginning, is 
placed following with additional arguments. The critical component is a 
specifier character that determines the type of argument. 
.printf("Age: %d", 65);
.Output: 
.Age: 65 
.RETURN VALUE    
.Upon successful return, the printf() return the number of
.characters printed (excluding the null byte used to end output to
.strings).
.If an output error is encountered, a -1 is returned.
.Variadic functions with printf()
.Are functions that can take multiple of arguments, this adds flexibility 
of which printf functions allows several arguments to be passed in a formatted 
string. Variadic functions consists of one fixed variable and then an ellipsis 
(...¦) as the last parameter defining that it can take various arguments. This
function is assessed under the header <stdarg.h> with the following macro methods:
.va_list@ holds the information required by va_start, va_arg, va_end and va_copy.
va_list args; is declaring va_list variable to manage list of arguments to pass 
the function. 
.va_start@ "Starting the list" it initialises the va_list arguments to start a 
variable. va_start(args, format); whereas in this case the variable that is
pointed is the format which is the last fixed argument in the variadic function
before it calls to va_arg.
.va_arg@ in a printf() function, this method is "fetching" or else retrieving
the next argument within the va_list (args) once it is started by va_start.
It is a useful method where it retrieves the next argument from va_list
(e.g., va_list args) and accept the value of pointed variable char to a character
str, within this syntax: char *str = va_arg(args, char *);. This allows to
increment str str++; which enable str pass as an argument string that can be
printed on the stdout. va_end: must matched the corresponding invocation of
va_start (e.g., va_start(args, format); and va_end(args)).
After calling va_end(args), it will end the passing argument and return the
value (str). 
.Syntax:
.int function_name(data_type variable_name,...)
.Conversion specifiers
.Or format specifiers define what to be printed into the standard output.
They denote the % symbol for example %d to print a number or decimal. It
tells the compiler the information that the user wants to be printed. However,
without indicating % symbol within syntax it will produce an error. 
%c@ is a character data type. int argument is converted into unsigned char
syntax - int (*get_specifier(char s))(va_list) is calling the argument pointing
to the function pointer *get_specifier. When the function hit an array -
{"c", print_char}, the compiler will read and print the character string on
stdout. The int is converted into character.
.s%@ is a string format. str_len function calculates the length of the string.
syntax - char *str = va_arg(args, char *); as args retrieve the value of
function pointer *str. This allows function to print a string. Together
with str_len, number of characters within the string will be equal to the
number of characters plus the lenght of string as what it was illustrated by
the syntax - chara_print += str_len.
.%%@ it prints the % character.The format specifier is %% with no argument
converted. 
.With (void)args; we can _putchar('%') and be printed on standard output
as %.
.d% and i%@ i is a signed integer (e.g., int = 0) whilst d is for signed
integer type were it can denote a negative number.
.Number characters will be printed to stdout via declaring the function prototype
int print_int(va_list args); if the condition was num < 0, it will write a negative
number on stdout with _putchar () function and else if its a positive number
pos_num = num;
.x in printf("%x\n") prints a hexadecimal specifier that convert number to
a string of hexadecimal digits where len is taken into account for length.
.get_specifier file
.has int (*get_specifier(char s))(va_list) is a function prototype that access the
information of the specific format conversion to convert int to characters
that can printed in stdout. va_list has all information of arguments for format
conversion.
.Function pointer - *print_sp is a handle function that produces the actual
output.
._putchar() writes each character in the standard output.
.EXAMPLE
#include <stdio.h>
printf("Let's try to printf a simple sentence.\n");
.To print a character H
printf("Character:[%c]\n", 'H')
Output: Let's try to printf a simple sentence
        Character:[H]
/*as %c is a character specifier for printing character*/
.Allocating characters and entire string length while printing it to stdout:
int _printf(const char *format, ...)
{
int string_print = 0;
va_list ap;
if (format == NULL)/*if format changed it will terminate*/
return (-1);
va_start(ap, format)/*format as the first parameter for printf function*/
while (*format)/*loop that interated through each characters of format string*/
{
if (*format == 'c')
{
char c = va_arg(ap, int);/*handle 'c' character, using va_arg enlist next argument
va_list for char*/
putchar(*format);
string_print++/*track number of characterd to be printed
}
va_end(ap);
return (string_print);
}
}
.Author
.Chutima Puthachon, Angela Enriquez Garcia, Mary Ruth G. Fletcher
