.man_3_printf "July 2024" "Cohort_2024, Holberton School" "Project: C - printf"  
.Name
.printf
.SYNOPSIS 
.#include "main.h"
.int printf(const char *format ...);
.DESCRIPTION 
.The functions in the printf() family generates an output according to
a format parameter with its list of arguments. A format string consists of 
texts and characters that are printed on the standard output (stdout).
Format specifiers denoting the symbol (%) at the beginning, is 
placed following with additional arguments. The critical component is a 
specifier character that determines the type of argument that be printed.
.Example: 
.printf("Age: %d", 65);
.Output: 
.Age: 65 
.RETURN VALUE
.Upon successful return, the printf() return the number of
.characters printed (excluding the null byte used to end output to
.strings).
.If an output error is encountered, -1 is returned.
.Variadic functions with printf()
.are functions that can take multiple of arguments, this allows printf () to
print string format whilst, taking multiple variable arguments controlled by
format specifiers. 
.Variadic functions consists of one fixed variable and then an ellipsis 
(...¦)-  as the last parameter define by taking various arguments. This
function is assessed under the header <stdarg.h> with the following macro methods:
.va_list@ holds the information required by va_start, va_arg, va_end and va_copy.
va_list args; is declaring va_list variable to manage list of arguments to pass 
through varibales and function. 
.va_start@ "Starting the list"- it initialises the va_list arguments to start a 
variable. va_start(args, format); whereas in this case, the variable that is
pointed, is the format which is the last fixed argument in the variadic function
before it calls to va_arg.
.va_arg@ in a printf() function, this method is "fetching" or else retrieving
the next argument within the va_list (args) once it is started by va_start.
It is a useful method where it retrieves the next argument from va_list
accept the value of pointed variable char to a character str, within 
this syntax: char *str = va_arg(args, char *);. This allows to
increment str (str++); which enable the next format string to be printed in stdout.
va_end: must matched the corresponding invocation of
va_start (e.g., va_start(args, format); and va_end(args)).
After calling va_end(args), it will end the passing argument and return the
value (str). 
.Syntax:
.int function_name(data_type variable_name,...)
.Conversion specifiers
.Or format specifiers whihc define what is to be printed into stdout.
They denote the % symbol for example %d to print a number or decimal. It
tells the compiler the information that the user wants to be printed. However,
without indicating % symbol within syntax it will produce an error. 
%c@ is a character data type. int argument is converted into unsigned char
syntax - int (*get_specifier(char s))(va_list) is calling the argument pointing
to the function pointer *get_specifier. When the function hit an array -
{"c", print_char}, the compiler will read and print the character string on
stdout. While, int is converted into character.
.s%@ is a string format. str_len function calculates the length of the string.
syntax - char *str = va_arg(args, char *); as args retrieve the value of
function pointer *str. This allows function to print a string. Together
with str_len, number of characters within the string will be equal to the
number of characters plus the lenght of string as what it was illustrated by
the syntax - chara_print += str_len.
.%%@ it prints the % character.The format specifier is %% with no argument
converted. 
.With (void)args; _putchar('%') and be printed on standard output
as %.
.d% and i%@ i is a signed integer (e.g., int = 0) whilst d is for signed
integer type were it can denote a negative number.
.Number characters will be printed to stdout via declaring the function prototype
int print_int(va_list args); if the condition was num < 0, it will write a negative
number on stdout with _putchar () function and else if its a positive number
pos_num = num;
.get_specifier file
.has int (*get_specifier(char s))(va_list) is a function prototype that access the
information of the specific format conversion to convert int to characters
that can printed in stdout. va_list has all information of arguments for format
conversion.
.Function pointer - *print_sp is a handle function that produces the actual
output.
._putchar() writes each character in the standard output.
.EXAMPLE
#include <stdio.h>
printf("Let's try to printf a simple sentence.\n");
.To print a character H
printf("Character:[%c]\n", 'H')
Output: Let's try to printf a simple sentence
        Character:[H]
/*as %c is a character specifier for printing character*/
.Allocating characters and entire string length while printing it to stdout:
#include "main.h"
#include <stdlib.h>
#include <string.h>

/**
 * _printf - produces output according to a format
 * @format: is a string with format specifiers
 * Return: the number of characters printed
 */
int _printf(const char *format, ...)
{
	va_list args;
	int printed_chars = 0, count;
	int (*printf_sp)(va_list args);

	va_start(args, format);/*format is the first parameter of printf function*/

	if (format && strlen(format) == 1 && format[0] == '%')/*if the lenght and format
		return (-1);                                   changed it needs to end program*/      
	while (*format)/* while loop to interate one character and another*/
	{
		if (*format == '%')
		{
			format++;/*it will pass through format string with % symbol*/
			if (*format == '\0')
				break;/*if format did not pass througb % symbol*/
			printf_sp = get_specifier(*format);/*calling *get_specifier*/

			if (printf_sp)
			{
				count = printf_sp(args);
				if (count > 0)
					printed_chars = printed_chars + count;
			}
			else
			{
				_putchar('%');
				_putchar(*format);
				printed_chars += 2;
			}
		}
		else
		{
			_putchar(*format);
			printed_chars++;
		}
		format++;
	}
	va_end(args);
	return (printed_chars);
}
.Author
.Chutima Puthachon, Angela Enriquez Garcia, Mary Ruth G. Fletcher
